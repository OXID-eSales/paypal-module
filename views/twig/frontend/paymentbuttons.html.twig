{% block oscpaypal_paymentbuttons %}
    <div id="{{ buttonId }}" class="paypal-button-container {{ buttonClass }}"></div>
    {% if phpStorm %}<script>{% endif %}
    {% set paypal_init %}
        {% if not aid %}
            {% set aid = "" %}
        {% endif %}
        {% set sToken = oViewConf.getSessionChallengeToken() %}
        {% set sSelfLink = oViewConf.getSslSelfLink()|replace({"&amp;": "&"}) %}
        {% if buttonId == "oscpaypal_sepa" or buttonId == "oscpaypal_cc_alternative" %}
            FUNDING_SOURCES = [
                paypal.FUNDING.{% if buttonId == "oscpaypal_sepa" %}SEPA{% elseif buttonId == "oscpaypal_cc_alternative" %}CARD{% endif %}
            ];
            // Loop over each funding source/payment method
            FUNDING_SOURCES.forEach(function (fundingSource) {
                // Initialize the buttons
                let button = paypal.Buttons({
                    fundingSource: fundingSource,
                    createOrder: function (data, actions) {
                        return fetch('{{ sSelfLink|cat("cl=oscpaypalproxy&fnc=createOrder&paymentid=")|cat(buttonId)|cat("&context=continue&stoken=")|cat(sToken)|raw }}', {
                            method: 'post',
                            headers: {
                                'content-type': 'application/json'
                            }
                        }).then(function (res) {
                            return res.json();
                        }).then(function (data) {
                            return data.id;
                        })
                    },
                    onApprove: function (data, actions) {
                        captureData = new FormData();
                        captureData.append('orderID', data.orderID);
                        return fetch('{{ sSelfLink|cat("cl=oscpaypalproxy&fnc=approveOrder&paymentid=")|cat(buttonId)|cat("&context=continue&stoken=")|cat(sToken)|raw }}', {
                            method: 'post',
                            body: captureData
                        }).then(function (res) {
                            return res.json();
                        }).then(function (data) {
                            if (data.status == "ERROR") {
                                location.reload();
                            } else if (data.id && data.status == "APPROVED") {
                                location.replace('{{ sSelfLink|cat("cl=order")|raw }}');
                            }
                        })
                    },
                    onCancel: function (data, actions) {
                        fetch('{{ sSelfLink|cat("cl=oscpaypalproxy&fnc=cancelPayPalPayment")|raw }}');
                    },
                    onError: function (data) {
                        fetch('{{ sSelfLink|cat("cl=oscpaypalproxy&fnc=cancelPayPalPayment")|raw }}');
                    }
                })
                // Check if the button is eligible
                if (button.isEligible()) {
                    // Render the standalone button for that funding source
                    button.render('#{{ buttonId }}')
                }
            });
        {% else %}
            button = paypal.Buttons({
                {% if oViewConf.getCountryRestrictionForPayPalExpress() %}
                onShippingChange: function (data, actions) {
                    if (!countryRestriction.includes(data.shipping_address.country_code)) {
                        return actions.reject();
                    }
                    return actions.resolve();
                },
                {% endif %}
                createOrder: function (data, actions) {
                    return fetch('{{ sSelfLink|cat("cl=oscpaypalproxy&fnc=createOrder&context=continue&aid=")|cat(aid)|cat("&stoken=")|cat(sToken)|raw }}', {
                        method: 'post',
                        headers: {
                            'content-type': 'application/json'
                        }
                    }).then(function (res) {
                        return res.json();
                    }).then(function (data) {
                        return data.id;
                    })
                },
                onApprove: function (data, actions) {
                    captureData = new FormData();
                    captureData.append('orderID', data.orderID);
                    return fetch('{{ sSelfLink|cat("cl=oscpaypalproxy&fnc=approveOrder&context=continue&aid=")|cat(aid)|cat("&stoken=")|cat(sToken)|raw }}', {
                        method: 'post',
                        body: captureData
                    }).then(function (res) {
                        return res.json();
                    }).then(function (data) {
                        if (data.status == "ERROR") {
                            location.reload();
                        } else if (data.id && data.status == "APPROVED") {
                            location.replace('{{ sSelfLink|cat("cl=order")|raw }}');
                        }
                    })
                },
                onCancel: function (data, actions) {
                    fetch('{{ sSelfLink|cat("cl=oscpaypalproxy&fnc=cancelPayPalPayment")|raw }}');
                },
                onError: function (data) {
                    fetch('{{ sSelfLink|cat("cl=oscpaypalproxy&fnc=cancelPayPalPayment")|raw }}');
                }
            })
            if (button.isEligible()) {
                button.render('#{{ buttonId }}');
            }
        {% endif %}
    {% endset %}
    {% if phpStorm %}</script>{% endif %}
    {{ script({ add: paypal_init.__toString(), priority: 10, dynamic: __oxid_include_dynamic }) }}
{% endblock %}
